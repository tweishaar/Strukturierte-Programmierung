PROGRAM tree;USES crt;TYPE NodePointer = ^Node;Node = RECORDkey: String;left, right: NodePointer;END;VAR root: NodePointer = NIL;i: Integer;input: String;PROCEDURE insert (VAR n: NodePointer; k: String);BEGINIF n = NIL THEN BEGINnew(n);n^.key := k;n^.left := NIL;n^.right := NILEND ELSE BEGINIF k < n^.key THENinsert(n^.left, k)ELSE IF k > n^.key THENinsert(n^.right, k)ENDEND;FUNCTION search (VAR n: NodePointer; k: String) : Boolean;BEGINIF n = NIL THENsearch := falseELSE BEGINIF k < n^.key THENsearch := search(n^.left, k)ELSE IF k > n^.key THENsearch := search(n^.right, k)ELSE search := trueENDEND;PROCEDURE traversal (VAR n: NodePointer; ascend: Boolean);BEGINIF n <> NIL THEN BEGINIF ascend THEN BEGINtraversal(n^.left, ascend);writeln(n^.key);traversal(n^.right, ascend)END ELSE BEGINtraversal(n^.right, ascend);writeln(n^.key);traversal(n^.left, ascend)END;ENDEND;{1. Initialize current as root2. While current is not NULLIf current does not have left childa) Print currentâ€™s datab) Go to the right, i.e., current = current->rightElsea) Make current as right child of the rightmost node in current's left subtreeb) Go to this left child, i.e., current = current->left}PROCEDURE MorrisTraversal (VAR root: NodePointer);VAR current, previous: NodePointer;BEGINIF root <> NIL THEN BEGINcurrent := root;WHILE current <> NIL DO BEGINIF current^.left = NIL THEN BEGINWriteLn(current^.key);current := current^.rightEND ELSE BEGINprevious := current^.left;WHILE (previous^.right <> NIL) AND (previous^.right <> current) DOprevious := previous^.right;IF previous^.right = NIL THEN BEGINprevious^.right := current;current := current^.leftEND ELSE BEGINprevious^.right := NIL;WriteLn(current^.key);current := current^.right;ENDENDENDENDEND;BEGINFOR i := 1 TO 10 DOBEGINWrite(i:2, '. Geben Sie einen Namen ein: '); ReadLn(input);insert(root, input)END;WriteLn;Write('Geben Sie ein zu findenden Namen ein: '); ReadLn(input);IF search(root, input) THEN WriteLn(input);WriteLn;traversal(root, true);WriteLn;traversal(root, false);WriteLn;MorrisTraversal(root);REPEAT UNTIL KeyPressed;END.